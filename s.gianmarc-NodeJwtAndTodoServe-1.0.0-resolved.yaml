---
openapi: 3.0.0
info:
  title: Swagger NodeJwtAndTodoServer
  description: This is a Todo manager server and an Authorization JWT server.  You can find out the Github project at [NodeJwtAndTodoServer](https://github.com/gian89/NodeJwtAndToDoServer)
  termsOfService: http://swagger.io/terms/
  contact:
    email: s.gianmarco@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
- url: https://virtserver.swaggerhub.com/s.gianmarc/NodeJwtAndTodoServe/1.0.0
  description: SwaggerHub API Auto Mocking
- url: http://localhost:3001
  description: Node server on your PC
tags:
- name: toDo
  description: How to manage your Todo
  externalDocs:
    description: Find out more
    url: http://swagger.io
- name: user
  description: Operations about user
  externalDocs:
    description: Find out more
    url: http://swagger.io
paths:
  /getTask:
    get:
      tags:
      - toDo
      summary: Returns all the task in the DB
      description: Returns all the task in the DB
      operationId: getTask
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskArray'
            application/xml:
              schema:
                $ref: '#/components/schemas/TaskArray'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "400":
          description: expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "500":
          description: internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
      - bearerAuth: []
  /addTask:
    post:
      tags:
      - toDo
      summary: Add a task
      description: Add a task to the DB
      operationId: addTask
      requestBody:
        $ref: '#/components/requestBodies/AddTask'
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
            application/xml:
              schema:
                $ref: '#/components/schemas/Task'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "400":
          description: expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "500":
          description: internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
      - bearerAuth: []
  /deleteTask:
    delete:
      tags:
      - toDo
      summary: Deletes a task
      description: Delete a task by ID
      operationId: deleteTask
      parameters:
      - name: id
        in: query
        description: Task id to delete
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "400":
          description: expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "500":
          description: internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
      - bearerAuth: []
  /getTaskById:
    get:
      tags:
      - toDo
      summary: Find a task by Id
      description: Find a task by Id
      operationId: getTaskById
      parameters:
      - name: id
        in: query
        description: Task id to delete
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskArray'
            application/xml:
              schema:
                $ref: '#/components/schemas/TaskArray'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "400":
          description: expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "500":
          description: internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
      - bearerAuth: []
  /getTaskByUsername:
    get:
      tags:
      - toDo
      summary: Find a task by username
      description: Find a task by username
      operationId: getTaskByUsername
      parameters:
      - name: username
        in: query
        description: username of the task owner
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskArray'
            application/xml:
              schema:
                $ref: '#/components/schemas/TaskArray'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "400":
          description: expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "500":
          description: internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
      - bearerAuth: []
  /updateTask:
    put:
      tags:
      - toDo
      summary: Update a task
      description: Update a task to the DB
      operationId: updateTask
      requestBody:
        $ref: '#/components/requestBodies/Task'
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
            application/xml:
              schema:
                $ref: '#/components/schemas/Task'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "400":
          description: expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "500":
          description: internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
      - bearerAuth: []
  /login:
    post:
      tags:
      - user
      summary: Login
      description: Login
      operationId: login
      requestBody:
        $ref: '#/components/requestBodies/User'
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInfo'
            application/xml:
              schema:
                $ref: '#/components/schemas/UserInfo'
        "401":
          description: Incorrect Password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "404":
          description: User does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "500":
          description: internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /registerUser:
    post:
      tags:
      - user
      summary: Add a new user
      description: Add a new user
      operationId: registerUser
      requestBody:
        $ref: '#/components/requestBodies/User'
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserObject'
            application/xml:
              schema:
                $ref: '#/components/schemas/UserObject'
        "409":
          description: Email Already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "500":
          description: internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponse'
  /checkAccessToken:
    get:
      tags:
      - user
      summary: Check the access token validity
      description: Check the access token validity
      operationId: checkAccessToken
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenInfo'
            application/xml:
              schema:
                $ref: '#/components/schemas/TokenInfo'
        "401":
          description: Invalid  token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "400":
          description: expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "500":
          description: internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
      - bearerAuth: []
  /refreshAccessToken:
    get:
      tags:
      - user
      summary: Get new access token using the refresh token
      description: Get new access token using the refresh token
      operationId: refreshAccessToken
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessToken'
            application/xml:
              schema:
                $ref: '#/components/schemas/AccessToken'
        "401":
          description: Invalid  token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "400":
          description: expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        "500":
          description: internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
      - refreshBearerAuth: []
  /getUsers:
    get:
      tags:
      - user
      summary: Returns all the user in the DB
      description: Returns all the user in the DB. NO SECURITY. Just for testing
      operationId: getUsers
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserObjectArray'
            application/xml:
              schema:
                $ref: '#/components/schemas/UserObjectArray'
        "500":
          description: internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
            application/xml:
              schema:
                $ref: '#/components/schemas/ApiResponse'
      security:
      - bearerAuth: []
components:
  schemas:
    Task:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
          description: Username
        text:
          type: string
          description: task description
        date:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          enum:
          - toDo
          - done
      xml:
        name: Task
    TaskArray:
      type: array
      items:
        $ref: '#/components/schemas/Task'
    AddTask:
      type: object
      properties:
        username:
          type: string
          description: Username
        text:
          type: string
          description: task description
        date:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          enum:
          - toDo
          - done
      xml:
        name: AddTask
    User:
      type: object
      properties:
        username:
          type: string
          description: Username
        password:
          type: string
          description: password
      xml:
        name: User
    UserObject:
      type: object
      properties:
        username:
          type: string
          description: Username
        password:
          type: string
          description: password
        id:
          type: integer
          format: int64
      xml:
        name: UserObject
    UserObjectArray:
      type: array
      items:
        $ref: '#/components/schemas/UserObject'
    UserInfo:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/UserInfo_user'
        access_token:
          type: string
          description: Access Token
        expires_in:
          type: integer
          format: int64
        refresh_token:
          type: string
          description: Refresh Token
      xml:
        name: UserInfo
    TokenInfo:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
          description: Username
        accessToken:
          type: string
          description: access token status
      xml:
        name: TokenInfo
    AccessToken:
      type: object
      properties:
        accessToken:
          type: string
          description: access token
      xml:
        name: AccessToken
    ApiResponse:
      type: object
      properties:
        status:
          type: integer
          format: int32
        message:
          type: string
    UserInfo_user:
      type: object
      properties:
        username:
          type: string
        id:
          type: integer
          format: int64
  requestBodies:
    Task:
      description: Complete Task object
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Task'
        application/xml:
          schema:
            $ref: '#/components/schemas/Task'
      required: true
    AddTask:
      description: Task object without Id
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AddTask'
        application/xml:
          schema:
            $ref: '#/components/schemas/AddTask'
      required: true
    User:
      description: User auth info
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
        application/xml:
          schema:
            $ref: '#/components/schemas/User'
      required: true
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
      required: true
    UserInfo:
      description: User complete info
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserInfo'
        application/xml:
          schema:
            $ref: '#/components/schemas/UserInfo'
      required: true
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    refreshBearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
